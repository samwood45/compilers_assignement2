/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CCAL.jj */
/*@egen*//* CCAL LANGUAGE*/

options {
	IGNORE_CASE = true;
	               
	             
	                         
}
PARSER_BEGIN(CCAL)
import java.util.*;
import java.io.*;

public class CCAL/*@bgen(jjtree)*/implements CCALTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCCALState jjtree = new JJTCCALState();

/*@egen*/

	public static SymTable symbolTable = new SymTable();
    public static String scope = "program";

	public static void main(String [] args ) {

		CCAL tokeniser;
		if (args.length == 0) {
			System.out.println("Now reading the input.");
			tokeniser = new CCAL(System.in);
		}	

		else if (args.length == 1) {

			try {
				tokeniser = new CCAL(new java.io.FileInputStream(args[0]));
				}
			catch (java.io.FileNotFoundException e) {
			System.out.println("File " + args[0] + " not found.");
			return;
			}
		}

		else {
			System.out.println("CCAL: Usage is one of:");
			System.out.println(" java CCAL < inputfile");
			System.out.println("OR");
			System.out.println(" java CCAL inputfile");
			return;
		}

		try{ 
		SimpleNode root = tokeniser.program();
	
		System.out.println("           \n Abstract Syntax Tree \n");
		root.dump("");

		Analyzer analyze = new Analyzer();
		root.jjtAccept(analyze, symbolTable);

		
        System.out.println("           \n Symbol Table \n ");            
        symbolTable.tablePrint();
		
		System.out.println("Input has now successfully parsed.");
	
 }
	catch(ParseException e){
		System.out.println("Input translation failed during parsing");
		System.out.println(e.getMessage());
	}

	catch(TokenMgrError e){
		System.out.println("Input translation failed during parsing");
		System.out.println(e.getMessage());
	}
   }
	
}
PARSER_END(CCAL)


//skip tokens

SKIP :{ " "| "\n" | "\r" | "\r\n" | "\t" }

//skip single line comments

SKIP : {
    <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

SKIP : {
    "/*" { commentNesting++; } : IN_COMMENT
}

TOKEN_MGR_DECLS :
{
	static int commentNesting = 0;
}

<IN_COMMENT> SKIP : {
    "/*" { commentNesting++; }
    | "*/" { commentNesting--;
        if (commentNesting == 0)
            SwitchTo(DEFAULT);
    	}
    | <~[]>
}

//reserved words 

TOKEN: { 
 <VARIABLE : "var">
| <CONSTANT : "const">
| <RETURN : "return">
| <INTEGER :"integer">
| <BOOLEAN : "boolean">
| <VOID : "void">
| <MAIN : "main">
| <IF : "if">
| <ELSE : "else">
| <TRUE : "true">
| <FALSE : "false">
| <WHILE : "while">
| <SKIP_TOKEN : "skip">
 }

//parameters and operators

TOKEN :{
 <COMMA: ","> 
| <SEMICOLON : ";"> 
| <COLON : ":"> 
| <ASSIGN: "="> 
| <LEFTCBRACKET : "{"> 
| <RIGHTCBRACKET : "}"> 
| <LEFTBRACKET : "("> 
| <RIGHTBRACKET : ")"> 
| <PLUS : "+"> 
| <MINUS : "-"> 
| <NEGATE : "~"> 
| <OR : "||"> 
| <AND : "&&"> 
| <ISEQUALTO: "=="> 
| <NOTEQUALS: "!="> 
| <LT: "<"> 
| <LT_EQ: "<="> 
| <GT : ">"> 
| <GT_EQ: ">="> 
}

//Numbers and identifiers

TOKEN : { 
<NUM : (["0"]) | ("-")? ["1" -"9"] (<DIGIT>)*>
| <#DIGIT : ["0"-"9"]>
| <#LETTER : ["a" -"z", "A"-"Z"]> 
| <ID : <LETTER> (<LETTER>| <DIGIT> | "_")* >
  }

TOKEN:
{
<OTHER : ~[]>
}

//Grammar

SimpleNode program()         :
{/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
        try {
/*@egen*/
	Decl_List() Function_List() Main() <EOF>/*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                 }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Id()            : {/*@bgen(jjtree) Identifier */
                          ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	(t = <ID>)/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String type()       : {/*@bgen(jjtree) Type */
                       ASTType jjtn000 = new ASTType(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
                try {
/*@egen*/
		(t = <INTEGER>)/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {jjtn000.value = t.image; return t.image;}
	| 	(t =  <BOOLEAN>)/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ {jjtn000.value = t.image; return t.image;}
	| 	(t =  <VOID>)/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}


void Number()         : {/*@bgen(jjtree) Number */
                         ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Number */
        try {
/*@egen*/
	t = <NUM>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Decl_List():
{}
{
	(Decl() <SEMICOLON> Decl_List())?
}

void Decl():
{}
{
	(Var_Decl() | Const_Decl() )
}

void Var_Decl()                      :
{/*@bgen(jjtree) Variable_Declaration */
 ASTVariable_Declaration jjtn000 = new ASTVariable_Declaration(JJTVARIABLE_DECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Variable_Declaration */
        try {
/*@egen*/
	t = <VARIABLE> id = Id() <COLON> type = type()/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                       }
/*@egen*/ {jjtn000.value = t.image; symbolTable.put(id,type,"variable",scope);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Const_Decl()                      :
{/*@bgen(jjtree) Constant_Declaration */
 ASTConstant_Declaration jjtn000 = new ASTConstant_Declaration(JJTCONSTANT_DECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Constant_Declaration */
        try {
/*@egen*/
	t= <CONSTANT> id = Id() <COLON> type = type() <ASSIGN> Expression()/*@bgen(jjtree)*/
                                                                            {
                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                              jjtc000 = false;
                                                                            }
/*@egen*/ {jjtn000.value = t.image; symbolTable.put(id,type,"constant",scope);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



void Function_List():
{}
{
	(Function() Function_List())?
}

void Function()          :
{/*@bgen(jjtree) Function */
 ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String type; String id;}
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	type = type() id = Id() {symbolTable.put(id,type,"function",scope);
    scope=id; } <LEFTBRACKET> Parameter_List() <RIGHTBRACKET>
	<LEFTCBRACKET>
	Decl_List()
	Statement_Block()
	<RETURN> <LEFTBRACKET> (Expression())? <RIGHTBRACKET> <SEMICOLON>
	<RIGHTCBRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Parameter_List():
{}
{
	(Nemp_Parameter_List())?
}

void Nemp_Parameter_List()            : {/*@bgen(jjtree) NParamList */
                                         ASTNParamList jjtn000 = new ASTNParamList(JJTNPARAMLIST);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String type; String id;}
{/*@bgen(jjtree) NParamList */
        try {
/*@egen*/
	id = Id() <COLON> type =type() (<COMMA> Nemp_Parameter_List())?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ symbolTable.put(id,type,"parameter",scope); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Main()      :
{/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
        try {
/*@egen*/
	{scope = "main";}
	<MAIN>
	<LEFTCBRACKET>
	Decl_List()
	Statement_Block()
	<RIGHTCBRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Statement_Block() :
{}
{
	(Statement() Statement_Block())?
}

void Statement()           :
{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
        try {
/*@egen*/
	<ID> Statement_P()
| 	<LEFTCBRACKET> Statement_Block() <RIGHTCBRACKET>
|	<IF> Condition() <LEFTCBRACKET> Statement_Block() <RIGHTCBRACKET> <ELSE> <LEFTCBRACKET> Statement_Block() <RIGHTCBRACKET>
| <WHILE> Condition() <LEFTCBRACKET> Statement_Block() <RIGHTCBRACKET>
|	<SKIP_TOKEN> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Statement_P():
{}
{
	<ASSIGN> Expression() <SEMICOLON>
| 	<LEFTBRACKET> Arg_List() <RIGHTBRACKET> <SEMICOLON>
}

void Expression():
{}
{
	Fragment() Expression_P()
| 	<LEFTBRACKET> Expression() <RIGHTBRACKET>
Expression_P()
}

void Expression_P():
{}
{
	(Binary_Arith_Op() Expression())?
}

void Binary_Arith_Op():
{}
{
	<PLUS> | <MINUS>
}

void Fragment():
{}
{
	(<MINUS>)? <ID> (<LEFTBRACKET>Arg_List()<RIGHTBRACKET>)?
| 	<NUM>
| 	<TRUE>
|	<FALSE>
}

void Condition():
{}
{
	<NEGATE> Condition()
| 	<LEFTBRACKET> Condition() <RIGHTBRACKET>
Bool_Condition()
| Condition_P() Bool_Condition()
}

void Bool_Condition() :
{}
{
	((<OR> | <AND>) Condition())?
}

void Condition_P():
{}
{
	Fragment() Comp_Op()
}

void Comp_Op()      :
{/*@bgen(jjtree) comp */
  ASTcomp jjtn000 = new ASTcomp(JJTCOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) comp */
        try {
/*@egen*/
	<ISEQUALTO> Expression()
|	<NOTEQUALS> Expression()
| 	<LT> Expression()
| 	<LT_EQ> Expression()
| 	<GT> Expression()
|	<GT_EQ> Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Arg_List()          :
{/*@bgen(jjtree) Arg_List */
  ASTArg_List jjtn000 = new ASTArg_List(JJTARG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arg_List */
        try {
/*@egen*/
	(Nemp_Arg_List())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Nemp_Arg_List():
{}
{
	(<ID> (<COMMA> Nemp_Arg_List())?)
}