/* Generated By:JJTree&JavaCC: Do not edit this line. CCAL.java */
import java.util.*;
import java.io.*;

public class CCAL/*@bgen(jjtree)*/implements CCALTreeConstants, CCALConstants {/*@bgen(jjtree)*/
  protected static JJTCCALState jjtree = new JJTCCALState();
        public static SymTable symbolTable = new SymTable();
    public static String scope = "program";

        public static void main(String [] args ) {

                CCAL tokeniser;
                if (args.length == 0) {
                        System.out.println("Now reading the input.");
                        tokeniser = new CCAL(System.in);
                }

                else if (args.length == 1) {

                        try {
                                tokeniser = new CCAL(new java.io.FileInputStream(args[0]));
                                }
                        catch (java.io.FileNotFoundException e) {
                        System.out.println("File " + args[0] + " not found.");
                        return;
                        }
                }

                else {
                        System.out.println("CCAL: Usage is one of:");
                        System.out.println(" java CCAL < inputfile");
                        System.out.println("OR");
                        System.out.println(" java CCAL inputfile");
                        return;
                }

                try{
                SimpleNode root = tokeniser.program();

                System.out.println("           \u005cn Abstract Syntax Tree \u005cn");
                root.dump("");

                Analyzer analyze = new Analyzer();
                root.jjtAccept(analyze, symbolTable);


        System.out.println("           \u005cn Symbol Table \u005cn ");
        symbolTable.tablePrint();

                System.out.println("Input has now successfully parsed.");

 }
        catch(ParseException e){
                System.out.println("Input translation failed during parsing");
                System.out.println(e.getMessage());
        }

        catch(TokenMgrError e){
                System.out.println("Input translation failed during parsing");
                System.out.println(e.getMessage());
        }
   }

//Grammar
  static final public SimpleNode program() throws ParseException {
 /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Decl_List();
      Function_List();
      Main();
      jj_consume_token(0);
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Id() throws ParseException {
                          /*@bgen(jjtree) Identifier */
                          ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image; {if (true) return t.image;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String type() throws ParseException {
                       /*@bgen(jjtree) Type */
                       ASTType jjtn000 = new ASTType(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                 jjtn000.value = t.image; {if (true) return t.image;}
        break;
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                  jjtn000.value = t.image; {if (true) return t.image;}
        break;
      case VOID:
        t = jj_consume_token(VOID);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.value = t.image; {if (true) return t.image;}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Number() throws ParseException {
                         /*@bgen(jjtree) Number */
                         ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Decl_List() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
    case CONSTANT:
      Decl();
      jj_consume_token(SEMICOLON);
      Decl_List();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void Decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      Var_Decl();
      break;
    case CONSTANT:
      Const_Decl();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Var_Decl() throws ParseException {
 /*@bgen(jjtree) Variable_Declaration */
 ASTVariable_Declaration jjtn000 = new ASTVariable_Declaration(JJTVARIABLE_DECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(VARIABLE);
      id = Id();
      jj_consume_token(COLON);
      type = type();
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                        jjtn000.value = t.image; symbolTable.put(id,type,"variable",scope);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Const_Decl() throws ParseException {
 /*@bgen(jjtree) Constant_Declaration */
 ASTConstant_Declaration jjtn000 = new ASTConstant_Declaration(JJTCONSTANT_DECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(CONSTANT);
      id = Id();
      jj_consume_token(COLON);
      type = type();
      jj_consume_token(ASSIGN);
      Expression();
                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                              jjtc000 = false;
                                                                             jjtn000.value = t.image; symbolTable.put(id,type,"constant",scope);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Function_List() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case VOID:
      Function();
      Function_List();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void Function() throws ParseException {
 /*@bgen(jjtree) Function */
 ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String type; String id;
    try {
      type = type();
      id = Id();
                                 symbolTable.put(id,type,"function",scope);
    scope=id;
      jj_consume_token(LEFTBRACKET);
      Parameter_List();
      jj_consume_token(RIGHTBRACKET);
      jj_consume_token(LEFTCBRACKET);
      Decl_List();
      Statement_Block();
      jj_consume_token(RETURN);
      jj_consume_token(LEFTBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case LEFTBRACKET:
      case MINUS:
      case NUM:
      case ID:
        Expression();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTBRACKET);
      jj_consume_token(SEMICOLON);
      jj_consume_token(RIGHTCBRACKET);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Parameter_List() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Nemp_Parameter_List();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void Nemp_Parameter_List() throws ParseException {
                                         /*@bgen(jjtree) NParamList */
                                         ASTNParamList jjtn000 = new ASTNParamList(JJTNPARAMLIST);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t; String type; String id;
    try {
      id = Id();
      jj_consume_token(COLON);
      type = type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        Nemp_Parameter_List();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          symbolTable.put(id,type,"parameter",scope);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Main() throws ParseException {
 /*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
         scope = "main";
      jj_consume_token(MAIN);
      jj_consume_token(LEFTCBRACKET);
      Decl_List();
      Statement_Block();
      jj_consume_token(RIGHTCBRACKET);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Statement_Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case SKIP_TOKEN:
    case LEFTCBRACKET:
    case ID:
      Statement();
      Statement_Block();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void Statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        Statement_P();
        break;
      case LEFTCBRACKET:
        jj_consume_token(LEFTCBRACKET);
        Statement_Block();
        jj_consume_token(RIGHTCBRACKET);
        break;
      case IF:
        jj_consume_token(IF);
        Condition();
        jj_consume_token(LEFTCBRACKET);
        Statement_Block();
        jj_consume_token(RIGHTCBRACKET);
        jj_consume_token(ELSE);
        jj_consume_token(LEFTCBRACKET);
        Statement_Block();
        jj_consume_token(RIGHTCBRACKET);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        Condition();
        jj_consume_token(LEFTCBRACKET);
        Statement_Block();
        jj_consume_token(RIGHTCBRACKET);
        break;
      case SKIP_TOKEN:
        jj_consume_token(SKIP_TOKEN);
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Statement_P() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Expression();
      jj_consume_token(SEMICOLON);
      break;
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
      Arg_List();
      jj_consume_token(RIGHTBRACKET);
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case MINUS:
    case NUM:
    case ID:
      Fragment();
      Expression_P();
      break;
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
      Expression();
      jj_consume_token(RIGHTBRACKET);
      Expression_P();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression_P() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      Binary_Arith_Op();
      Expression();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void Binary_Arith_Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACKET:
        jj_consume_token(LEFTBRACKET);
        Arg_List();
        jj_consume_token(RIGHTBRACKET);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGATE:
      jj_consume_token(NEGATE);
      Condition();
      break;
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
      Condition();
      jj_consume_token(RIGHTBRACKET);
      Bool_Condition();
      break;
    case TRUE:
    case FALSE:
    case MINUS:
    case NUM:
    case ID:
      Condition_P();
      Bool_Condition();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Bool_Condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Condition();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static final public void Condition_P() throws ParseException {
    Fragment();
    Comp_Op();
  }

  static final public void Comp_Op() throws ParseException {
 /*@bgen(jjtree) comp */
  ASTcomp jjtn000 = new ASTcomp(JJTCOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ISEQUALTO:
        jj_consume_token(ISEQUALTO);
        Expression();
        break;
      case NOTEQUALS:
        jj_consume_token(NOTEQUALS);
        Expression();
        break;
      case LT:
        jj_consume_token(LT);
        Expression();
        break;
      case LT_EQ:
        jj_consume_token(LT_EQ);
        Expression();
        break;
      case GT:
        jj_consume_token(GT);
        Expression();
        break;
      case GT_EQ:
        jj_consume_token(GT_EQ);
        Expression();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Arg_List() throws ParseException {
 /*@bgen(jjtree) Arg_List */
  ASTArg_List jjtn000 = new ASTArg_List(JJTARG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        Nemp_Arg_List();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Nemp_Arg_List() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      Nemp_Arg_List();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CCALTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c000,0x1800,0x1800,0x1c000,0x40300000,0x0,0x1000000,0x10c40000,0x10c40000,0x48000000,0x40300000,0x0,0x0,0x0,0x40000000,0x300000,0x40300000,0x0,0x0,0x0,0x0,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x4802,0x4000,0x0,0x4000,0x4000,0x0,0x4802,0x3,0x3,0x2,0x0,0x4802,0x4806,0x18,0x18,0x7e0,0x4000,0x0,};
   }

  /** Constructor with InputStream. */
  public CCAL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CCAL(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CCALTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CCAL(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CCALTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CCAL(CCALTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CCALTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
